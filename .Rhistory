fivenum(USArrests$Rape)
data(USArrests)
fivenum(USArrests$Murder)
fivenum(USArrests$Rape)
IQR(USArrests$Assault)
data(USArrests)
fivenum(USArrests$Murder)
fivenum(USArrests$Rape)
fivenum(USArrests$Assault)
IQR(USArrests$Assault)
rm(list=ls())
library("Rcpp")
library("VGAM")
library("Rfast")
library("data.table")
library("EcotoneFinder")
library("dplyr")
##### input the data
dat<-fread('year_ae_soc.tsv', header = TRUE, encoding="UTF-8")
View(dat)
dat<-select(dat,-Year, everything())
last_index = ncol(dat)
colnames(dat)[last_index] <- "year"
dat$year<-as.factor(dat$year)
dat<-dat[,-1]
dat = select(dat, -c("Neoplasms benign, malignant and unspecified (incl cysts and polyps)","Endocrine disorders","Ear and labyrinth disorders","Hepatobiliary disorders","Renal and urinary disorders","Pregnancy, puerperium and perinatal conditions","Reproductive system and breast disorders","Congenital, familial and genetic disorders","Injury, poisoning and procedural complications","Surgical and medical procedures","Surgical and medical procedures","Social circumstances","General disorders and administration site conditions"))
dat<-dat[(dat$year %in% c("1994","1995","1996","1997","1998","1999","2000","2001","2002","2003") ),]
dat %>% count(year)
dat_year = dat %>%
group_by(year) %>%
summarise(across(everything(), sum))
dat_year
rm(list=ls())
library("Rcpp")
library("VGAM")
library("Rfast")
library("data.table")
library("EcotoneFinder")
library("dplyr")
##### input the data
dat<-fread('year_ae_soc.tsv', header = TRUE, encoding="UTF-8")
View(dat)
dat<-select(dat,-Year, everything())
last_index = ncol(dat)
colnames(dat)[last_index] <- "year"
dat$year<-as.factor(dat$year)
dat<-dat[,-1]
dat = select(dat, -c("Neoplasms benign, malignant and unspecified (incl cysts and polyps)","Endocrine disorders","Ear and labyrinth disorders","Hepatobiliary disorders","Renal and urinary disorders","Pregnancy, puerperium and perinatal conditions","Reproductive system and breast disorders","Congenital, familial and genetic disorders","Injury, poisoning and procedural complications","Surgical and medical procedures","Surgical and medical procedures","Social circumstances","General disorders and administration site conditions"))
dat<-dat[(dat$year %in% c("1994","1995","1996","1997","1998","1999","2000","2001","2002","2003") ),]
dat %>% count(year)
dat_year = dat %>%
group_by(year) %>%
summarise(across(everything(), sum))
dat_year
dat_year = dat %>%
group_by(year) %>%
summarise(across(everything(), sum))
dat_year
library(bivariate)
install.packages("bivariatemaps")
library(bivariate)
install.packages("bivariate")
library(bivariate)
df <- load(mixing_inpatient.rda)
df <- load("mixing_inpatient.rda")
View(mixing.inpatient)
df[[1]]
mixing.inpatient[[1]]
mixing.inpatient[[1]]
mixing.inpatient[[2]]
mixing.inpatient[[2]]
a <- mixing.inpatient[[2]]
rowSums(a)
a <- mixing.inpatient[[2]]
a
a <- mixing.inpatient[[2]]
rowSums(a[,])
a <- mixing.inpatient[[2]]
rowSums(a[1:4,])
a <- mixing.inpatient[[2]]
a <- mixing.inpatient[[2]]
a
a <- mixing.inpatient[[2]]
a.T
a <- mixing.inpatient[[2]] %>% collect()
a <- collect(mixing.inpatient[[2]] )
a <- mixing.inpatient[[2]]
a <- mixing.inpatient[[2]]
a
a <- mixing.inpatient[[2]]
a <- a * 2
a <- as.dataframe(mixing.inpatient[[2]])
a <- mixing.inpatient[[2]]
a
library(shiny); runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/shiny_test.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
test<- c(0.37,0.18,0.22,0.25,0.45)
write.csv(test,"test.csv", row.names = FALSE)
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
test <- t(test)
write.csv(test,"test.csv", row.names = FALSE)
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
write.csv(test,"test.csv", row.names = FALSE, col.names = FALSE)
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
write.csv(test,"test_origami.csv",row.names = FALSE)
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
runApp('Dropbox/Mac/Desktop/origami_shiny.R')
library(stats)
power.t.test(n = 10, delta = 5, sd = 1, sig.level = 0.05,
power = NULL,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = 1000, delta = 5, sd = 1, sig.level = 0.05,
power = NULL,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = 1000, delta = 0.5, sd = 1, sig.level = 0.05,
power = NULL,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = 1000, delta = 0.5, sd = 7, sig.level = 0.05,
power = NULL,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = 1000, delta = 0.5, sd = 5, sig.level = 0.05,
power = NULL,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = NULL, delta = 0.5, sd = 5, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(delta = 0.5, sd = 5, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(delta = 0.5, sd = 1, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = NULL, delta = NULL, sd = 1, sig.level = 0.05,
power = NULL,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = NULL, delta = 1, sd = 1, sig.level = 0.05,
power = 0.6,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = NULL, delta = 1, sd = 1, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = NULL, delta = 1, sd = 1, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
a <- power.t.test(n = NULL, delta = NULL, sd = 1, sig.level = 0.05,
power = NULL,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
a <- power.t.test(n = NULL, delta = 1, sd = 1, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
a
a[[1]]
a[[2]]
a[[3]]
a[[4]]
a[[5]]
a[[6]]
power.t.test(n = NULL, delta = 1, sd = 1, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
tstt <- function(delta, sd, power){
a <- power.t.test(n = NULL, delta = 1, sd = 1, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
return(a[[1]])
}
test <- tstt(delta=0.5, sd=1, power=0.8)
power.t.test(n = NULL, delta = 0.5, sd = 1, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = NULL, delta = 1, sd = 1, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
tstt <- function(delta, sd, power){
a <- power.t.test(n = NULL, delta = NULL, sd = NULL, sig.level = 0.05,
power = 0.8,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
return(a[[1]])
}
test <- tstt(delta=0.5, sd=1, power=0.8)
tstt <- function(delta, sd, power){
a <- power.t.test(n = NULL, delta = delta, sd = sd, sig.level = 0.05,
power = power,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
return(a[[1]])
}
test <- tstt(delta=0.5, sd=1, power=0.8)
twosamplettest_n <- function(delta, sd, power){
result_list <- power.t.test(n = NULL, delta = delta, sd = sd, sig.level = 0.05,
power = power,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
return(as.numeric(result_list[[1]]))
}
twosamplettest_n(0.5,1,0.8)
twosamplettest_n <- function(delta, sd, power){
result_list <- power.t.test(n = NULL, delta = delta, sd = sd, sig.level = 0.05,
power = power,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
return(as.numeric(result_list[1]))
}
twosamplettest_n(0.5,1,0.8)
twosamplettest_n <- function(delta, sd, power){
result_list <- power.t.test(n, delta = delta, sd = sd, sig.level = 0.05,
power = power,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
return(as.numeric(result_list[1]))
}
twosamplettest_n(0.5,1,0.8)
twosamplettest_n <- function(delta, sd, power){
result_list <- power.t.test(n = NULL, delta = delta, sd = sd, sig.level = 0.05,
power = power,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
return(as.numeric(result_list[1]))
}
twosamplettest_n(0.5,1,0.8)
twosamplettest_n <- function(delta, sd, power){
result_list <- power.t.test(n = NULL, delta = delta, sd = sd, sig.level = 0.05,
power = power,
type = c("two.sample"),
alternative = c("two.sided"),
strict = FALSE, tol = .Machine$double.eps^0.25)
#return(as.numeric(result_list[1]))
return(result_list)
}
twosamplettest_n(0.5,1,0.8)
library(shiny); runApp('Dropbox/Mac/Desktop/panda_shiny 2.R')
runApp('Dropbox/Mac/Desktop/panda_shiny 2.R')
runApp('Dropbox/Mac/Desktop/panda_shiny 2.R')
runApp('Dropbox/Mac/Desktop/panda_shiny 2.R')
round(0.735, digits=2)
pwr.logRank(0.3, 0.4, sig.level = 0.05, power = 0.8,
alternative = c("two.sided", "less", "greater"),
method = c("Freedman"))
install.packages("bgreenwell/bmisc")
library("bgreenwell/bmisc")
library("bgreenwell/bmisc")
install.packages("BMisc")
library("BMisc")
pwr.logRank(0.3, 0.4, sig.level = 0.05, power = 0.8,
alternative = c("two.sided", "less", "greater"),
method = c("Freedman"))
a <- function(S.trt, S.ctrl, sig.level = 0.05, power = 0.8,
alternative = c("two.sided", "less", "greater"),
method = c("Freedman")) {
# FIXME: Relabel S.trt and S.ctrl as S.ctrl and S.trt
alt <- match.arg(alternative)
za <- if (alt == "two.sided") {
stats::qnorm(sig.level / 2)
} else {
stats::qnorm(sig.level)
}
zb <- stats::qnorm(1 - power)
haz.ratio <- log(S.trt) / log(S.ctrl)
cat("Expected number of events:", 4 * (za + zb) ^ 2 / log(1 / haz.ratio) ^ 2)
cat("\n")
(((haz.ratio + 1) / (haz.ratio - 1)) ^ 2) *
(za + zb) ^ 2 / (2 - S.trt - S.ctrl)
}
test <- a(0.3,0.4)
log(0.3)/log(0.4)
log(0.3)
a <- function(S.trt, S.ctrl, sig.level = 0.05, power = 0.8,
alternative = c("two.sided"),
method = c("Freedman")) {
alt <- match.arg(alternative)
za <- if (alt == "two.sided") {
stats::qnorm(sig.level / 2)
} else {
stats::qnorm(sig.level)
}
zb <- stats::qnorm(1 - power)
haz.ratio <- log(S.trt) / log(S.ctrl)
cat("Expected number of events:", 4 * (za + zb) ^ 2 / log(1 / haz.ratio) ^ 2)
cat("\n")
(((haz.ratio + 1) / (haz.ratio - 1)) ^ 2) *
(za + zb) ^ 2 / (2 - S.trt - S.ctrl)
}
test <- a(0.3,0.4)
a <- function(S.trt, S.ctrl, sig.level = 0.05, power = 0.8,
alternative = c("two.sided"),
method = c("Freedman")) {
alt <- match.arg(alternative)
za <- if (alt == "two.sided") {
stats::qnorm(sig.level / 2)
} else {
stats::qnorm(sig.level)
}
zb <- stats::qnorm(1 - power)
haz.ratio <- log(S.trt) / log(S.ctrl)
result = 4 * (za + zb) ^ 2 / log(1 / haz.ratio) ^ 2
return(result)
}
test <- a(0.3,0.4)
install.packages("powerSurvEpi")
library(powerSurvEpi)
test <- ssizeCT.default(power=0.8,
k = 2,
pE = 0.3,
pC = 0.4,
RR = 1.3,
alpha = 0.05)
typeof(test)
test[1]
log_rank <- function(power, k, pE, pC,RR,alpha=0.05){
result <- ssizeCT.default(power=power, k = k, pE = pE, pC = pC, RR = RR, alpha = alpha)
return(result[1], result[2])
}
a,b <- log_rank(power=0.8,k=2,pE=0.3,pC=0.4, RR=1.3)
a <- log_rank(power=0.8,k=2,pE=0.3,pC=0.4, RR=1.3)
log_rank <- function(power, k, pE, pC,RR,alpha=0.05){
result <- ssizeCT.default(power=power, k = k, pE = pE, pC = pC, RR = RR, alpha = alpha)
return(result)
}
a <- log_rank(power=0.8,k=2,pE=0.3,pC=0.4, RR=1.3)
source("origami_plot.R")
library(fmsb)
library(plotrix)
df1 <- read.csv("sample_data_1.csv")
setwd("~/Dropbox/Mac/Desktop/Origami_Plot_Generic")
source("origami_plot.R")
library(fmsb)
library(plotrix)
df1 <- read.csv("sample_data_1.csv")
df1 <- read.csv("sample_data_1.csv")
df1 <- df1[1,1:5]
df1 <- data_preparation(df1)
weight <- c(0.25,0.1,0.35,0.2,0.1)
#weight <- c(0.1,0.1,0.5,0.15,0.15)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
#weight <- c(0.25,0.1,0.35,0.2,0.1)
weight <- c(0.1,0.1,0.5,0.15,0.15)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
#weight <- c(0.25,0.1,0.35,0.2,0.1)
weight <- c(0.4,0.2,0.1,0.15,0.15)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
#weight <- c(0.25,0.1,0.35,0.2,0.1)
weight <- c(0.4,0.1,0.1,0.25,0.15)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
#weight <- c(0.25,0.1,0.35,0.2,0.1)
weight <- c(0.4,0.2,0.1,0.15,0.15)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
#weight <- c(0.25,0.1,0.35,0.2,0.1)
weight <- c(0.4,0.2,0.15,0.1,0.15)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
#weight <- c(0.25,0.1,0.35,0.2,0.1)
weight <- c(0.4,0.2,0.15,0.13,0.12)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
weight <- c(0.25,0.1,0.35,0.2,0.1)
#weight <- c(0.4,0.2,0.15,0.13,0.12)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
#weight <- c(0.25,0.1,0.35,0.2,0.1)
weight <- c(0.4,0.2,0.15,0.13,0.12)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
source("origami_plot.R")
library(fmsb)
df1 <- data_preparation(df1)
#weight <- c(0.25,0.1,0.35,0.2,0.1)
weight <- c(0.4,0.2,0.15,0.13,0.12)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
source("origami_plot.R")
library(fmsb)
df1 <- read.csv("sample_data_1.csv")
df1 <- df1[1,1:5]
df1 <- data_preparation(df1)
#weight <- c(0.25,0.1,0.35,0.2,0.1)
weight <- c(0.4,0.2,0.15,0.13,0.12)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
weight <- c(0.25,0.1,0.35,0.2,0.1)
#weight <- c(0.4,0.2,0.15,0.13,0.12)
origami_plot_weighted(df1, weight, pcol = rgb(0.2,0.5,0.5,1), pfcol = rgb(0.2,0.5,0.5,0.1),
axistype=1,
pty = 32,
centerzero = TRUE)
